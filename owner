// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AdvancedStorage {
    address public owner;
    string public storedData;
    mapping(address => string) public userData;
    
    event DataStored(address indexed user, string data, uint256 timestamp);
    event DataUpdated(address indexed user, string oldData, string newData, uint256 timestamp);
    event DataRemoved(address indexed user, string removedData, uint256 timestamp);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function set(string memory newData) external onlyOwner {
        string memory oldData = storedData;
        storedData = newData;
        userData[msg.sender] = newData;

        emit DataStored(msg.sender, newData, block.timestamp);
        if (bytes(oldData).length > 0) {
            emit DataUpdated(msg.sender, oldData, newData, block.timestamp);
        }
    }

    function get() external view returns (string memory) {
        return userData[msg.sender];
    }

    function remove() external onlyOwner {
        string memory removedData = userData[msg.sender];
        delete userData[msg.sender];

        emit DataRemoved(msg.sender, removedData, block.timestamp);
    }
}
